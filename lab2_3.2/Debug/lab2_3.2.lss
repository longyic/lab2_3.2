
lab2_3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000842  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072e  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b8  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b6  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000098  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  9e:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
		uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
	UDR0 = c;
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <uart_getchar+0x4>
	return UDR0;
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
  fc:	ec e1       	ldi	r30, 0x1C	; 28
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	93 83       	std	Z+3, r25	; 0x03
 106:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <main>:
#include <avr/interrupt.h>
#include "uart.h"

int main(void)
{
	uart_init();
 112:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_init>
	DDRC = 0x00;
 116:	17 b8       	out	0x07, r1	; 7
	DDRB |= (1 << PORTB2);
 118:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << PORTD3);
 11a:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1 << PORTB4);
 11c:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1 << PORTB2) | (1 <<PORTB3) | (1 << PORTB4);
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8c 61       	ori	r24, 0x1C	; 28
 122:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PORTC0);
 124:	40 9a       	sbi	0x08, 0	; 8
	
	ADMUX |= (1 << REFS0);         //reference 5V
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE);          //enable ADC
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 6a       	ori	r24, 0xA0	; 160
 138:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);  //factor 128
 13a:	80 81       	ld	r24, Z
 13c:	87 60       	ori	r24, 0x07	; 7
 13e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);        //Start conversion
 140:	80 81       	ld	r24, Z
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 83       	st	Z, r24
	ADCSRB &= ~((1 << ADTS0)|(1 << ADTS1)|(1 << ADTS2));    //free-running mode
 146:	eb e7       	ldi	r30, 0x7B	; 123
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	80 83       	st	Z, r24
	while (1)
	{
		if(ADC > 0 && ADC <= 128)
 150:	e8 e7       	ldi	r30, 0x78	; 120
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	89 2b       	or	r24, r25
 15a:	41 f0       	breq	.+16     	; 0x16c <main+0x5a>
 15c:	80 81       	ld	r24, Z
 15e:	91 81       	ldd	r25, Z+1	; 0x01
 160:	81 38       	cpi	r24, 0x81	; 129
 162:	91 05       	cpc	r25, r1
 164:	18 f4       	brcc	.+6      	; 0x16c <main+0x5a>
		{
			PORTB &= ~((1 << PORTB2) | (1 <<PORTB3) | (1 << PORTB4));
 166:	85 b1       	in	r24, 0x05	; 5
 168:	83 7e       	andi	r24, 0xE3	; 227
 16a:	85 b9       	out	0x05, r24	; 5
		}
		if(ADC > 128 && ADC <= 256)
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
 170:	81 38       	cpi	r24, 0x81	; 129
 172:	91 05       	cpc	r25, r1
 174:	48 f0       	brcs	.+18     	; 0x188 <main+0x76>
 176:	80 81       	ld	r24, Z
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	91 40       	sbci	r25, 0x01	; 1
 17e:	20 f4       	brcc	.+8      	; 0x188 <main+0x76>
		{
			PORTB &= ~((1 <<PORTB3) | (1 << PORTB4));
 180:	85 b1       	in	r24, 0x05	; 5
 182:	87 7e       	andi	r24, 0xE7	; 231
 184:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB2);
 186:	2a 9a       	sbi	0x05, 2	; 5
		}
		if(ADC > 256 && ADC <= 384)
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 40       	sbci	r25, 0x01	; 1
 190:	48 f0       	brcs	.+18     	; 0x1a4 <main+0x92>
 192:	80 81       	ld	r24, Z
 194:	91 81       	ldd	r25, Z+1	; 0x01
 196:	81 38       	cpi	r24, 0x81	; 129
 198:	91 40       	sbci	r25, 0x01	; 1
 19a:	20 f4       	brcc	.+8      	; 0x1a4 <main+0x92>
		{
			PORTB &= ~((1 <<PORTB2) | (1 << PORTB4));
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	8b 7e       	andi	r24, 0xEB	; 235
 1a0:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB3);
 1a2:	2b 9a       	sbi	0x05, 3	; 5
		}
		if(ADC > 384 && ADC <= 512)
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	81 38       	cpi	r24, 0x81	; 129
 1aa:	91 40       	sbci	r25, 0x01	; 1
 1ac:	48 f0       	brcs	.+18     	; 0x1c0 <main+0xae>
 1ae:	80 81       	ld	r24, Z
 1b0:	91 81       	ldd	r25, Z+1	; 0x01
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	92 40       	sbci	r25, 0x02	; 2
 1b6:	20 f4       	brcc	.+8      	; 0x1c0 <main+0xae>
		{
			PORTB &= ~((1 << PORTB4));
 1b8:	2c 98       	cbi	0x05, 4	; 5
			PORTB |= (1 <<PORTB2) | (1 << PORTB3);
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	8c 60       	ori	r24, 0x0C	; 12
 1be:	85 b9       	out	0x05, r24	; 5
		}
		if(ADC > 512 && ADC <= 640)
 1c0:	80 81       	ld	r24, Z
 1c2:	91 81       	ldd	r25, Z+1	; 0x01
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	92 40       	sbci	r25, 0x02	; 2
 1c8:	48 f0       	brcs	.+18     	; 0x1dc <main+0xca>
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	81 38       	cpi	r24, 0x81	; 129
 1d0:	92 40       	sbci	r25, 0x02	; 2
 1d2:	20 f4       	brcc	.+8      	; 0x1dc <main+0xca>
		{
			PORTB &= ~((1 <<PORTB3) | (1 << PORTB2));
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	83 7f       	andi	r24, 0xF3	; 243
 1d8:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB4);
 1da:	2c 9a       	sbi	0x05, 4	; 5
		}
		if(ADC > 640 && ADC <= 768)
 1dc:	80 81       	ld	r24, Z
 1de:	91 81       	ldd	r25, Z+1	; 0x01
 1e0:	81 38       	cpi	r24, 0x81	; 129
 1e2:	92 40       	sbci	r25, 0x02	; 2
 1e4:	48 f0       	brcs	.+18     	; 0x1f8 <main+0xe6>
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	93 40       	sbci	r25, 0x03	; 3
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <main+0xe6>
		{
			PORTB &= ~((1 << PORTB3));
 1f0:	2b 98       	cbi	0x05, 3	; 5
			PORTB |= (1 <<PORTB2) | (1 << PORTB4);
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	84 61       	ori	r24, 0x14	; 20
 1f6:	85 b9       	out	0x05, r24	; 5
		}
		if(ADC > 768 && ADC <= 896)
 1f8:	80 81       	ld	r24, Z
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	93 40       	sbci	r25, 0x03	; 3
 200:	48 f0       	brcs	.+18     	; 0x214 <main+0x102>
 202:	80 81       	ld	r24, Z
 204:	91 81       	ldd	r25, Z+1	; 0x01
 206:	81 38       	cpi	r24, 0x81	; 129
 208:	93 40       	sbci	r25, 0x03	; 3
 20a:	20 f4       	brcc	.+8      	; 0x214 <main+0x102>
		{
			PORTB &= ~((1 << PORTB2));
 20c:	2a 98       	cbi	0x05, 2	; 5
			PORTB |= (1 <<PORTB3) | (1 << PORTB4);
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	88 61       	ori	r24, 0x18	; 24
 212:	85 b9       	out	0x05, r24	; 5
		}
		if(ADC > 896 && ADC <= 1024)
 214:	80 81       	ld	r24, Z
 216:	91 81       	ldd	r25, Z+1	; 0x01
 218:	81 38       	cpi	r24, 0x81	; 129
 21a:	93 40       	sbci	r25, 0x03	; 3
 21c:	08 f4       	brcc	.+2      	; 0x220 <main+0x10e>
 21e:	9a cf       	rjmp	.-204    	; 0x154 <main+0x42>
 220:	80 81       	ld	r24, Z
 222:	91 81       	ldd	r25, Z+1	; 0x01
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	94 40       	sbci	r25, 0x04	; 4
 228:	08 f0       	brcs	.+2      	; 0x22c <main+0x11a>
 22a:	94 cf       	rjmp	.-216    	; 0x154 <main+0x42>
		{
			PORTB |= (1 << PORTB2) | (1 <<PORTB3) | (1 << PORTB4);
 22c:	85 b1       	in	r24, 0x05	; 5
 22e:	8c 61       	ori	r24, 0x1C	; 28
 230:	85 b9       	out	0x05, r24	; 5
 232:	90 cf       	rjmp	.-224    	; 0x154 <main+0x42>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
